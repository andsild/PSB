################
Thu 12 Jun 2014
################
Changed from CImg<T> to STL std::vector<T>. The translation from CImg to vector
takes some time, but it is faster to iterate over a 1d vector.
This NEEDS to be TESTED later (Mon 01 Jul 2014)

################
Mon 23 Jun 2014 
################
Changed from declarative style to OOP, which makes it easier to develop the 
program.


#################
Wed 25 Jun 2014 
#################
Changed from difference with averages of absolute differences
in U_{k} and U_{k+1}, to getting the max of absolute differences.

Realized that I was confusing stopping criteria with relative differences

################
Mon 01 Jul 2014
################
Changed from 1d STL std::vector to Cimg macro-loops, which was much faster
Ignore the first changelog

################
Mon 07 Jul 2014
################
changed from abs to fabs - big difference...........

Change SOR to red-black - it now doesn't converge, and gives good results
Unlike gauss-seidel and jacobi, which in general needs stop-critera set to 
a factor of 100 less than SOR to give accurate results, much slower!


################
Thu 10 Jul 2014
################
Images with "weird" values has to be saved/read using the ascii-format 
otherwise CImg will automatically round and cut the values when saving.


################
Mon 28 Jul 2014
################
Did some optimization.
The bottleneck for the iterative solvers are the for loops which on my computer
takes about 80 ms each. Here, access to the field values are the slowest.

Accessing them by pointer (not using macro for-loops) 
reduced each iteration with about 10 ms, but you would still have to find some
clever way to avoid the border

Accessing by float instead of double gave about 5 ms speedup per iteration
The results look the same in double and float, so I changed to use float

################
Thu 10t Aug 2014
################
After profiling, I found out that debug printing took a lot of time.
Thus, I addded the compiler flag to enable logging per build.

################
